 Naive:
 int findMaxLen(string s) {
        // code here
        stack<int> st;
        int ans=0;
        int i=0;
        
        while(i<s.size())
        {
            if(s[i]=='(')
                st.push(i);
            else
            {
                if(!st.empty() && s[st.top()]=='(')
                {
                    st.pop();
                    int x;
                    if(!st.empty())
                        x=st.top();
                    else
                        x=-1;
                 ans=max(ans,i-x);
                }
               
                else
                st.push(i);
            }
            ++i;
        }
        return ans;
    }
    
    
  optimize
int findMaxLen(string s) {
        
        
        int n=s.length();
        int left=0,right=0,maxlength=0;
        //left to right
        for(int i=0;i<n;i++)   
        {
            if(s[i]=='(')
            left++;
            else
            right++;
            
            if(left==right)
                maxlength=max(maxlength,2*right);
            
            else if(right>left)
                left=right=0;
        }
        

        left=0,right=0;
        for(int i=n-1;i>=0;i--)
        {
             if(s[i]=='(')
            left++;
            else
            right++;
            
             if(left==right)
                maxlength=max(maxlength,2*right);
            
            else if(right<left)
                left=right=0;
        }
        return maxlength;
    }
